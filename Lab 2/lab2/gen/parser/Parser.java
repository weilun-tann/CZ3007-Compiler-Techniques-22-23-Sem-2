package parser;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ID = 1;
		static public final short LBRACKET = 2;
		static public final short LPAREN = 3;
		static public final short MINUS = 4;
		static public final short STRING_LITERAL = 5;
		static public final short INT_LITERAL = 6;
		static public final short TRUE = 7;
		static public final short FALSE = 8;
		static public final short RPAREN = 9;
		static public final short SEMICOLON = 10;
		static public final short RCURLY = 11;
		static public final short VOID = 12;
		static public final short BOOLEAN = 13;
		static public final short INT = 14;
		static public final short LCURLY = 15;
		static public final short RBRACKET = 16;
		static public final short IF = 17;
		static public final short WHILE = 18;
		static public final short BREAK = 19;
		static public final short RETURN = 20;
		static public final short EQL = 21;
		static public final short IMPORT = 22;
		static public final short PUBLIC = 23;
		static public final short COMMA = 24;
		static public final short PLUS = 25;
		static public final short TIMES = 26;
		static public final short DIV = 27;
		static public final short MOD = 28;
		static public final short TYPE = 29;
		static public final short MODULE = 30;
		static public final short ELSE = 31;
		static public final short EQEQ = 32;
		static public final short NEQ = 33;
		static public final short LT = 34;
		static public final short LEQ = 35;
		static public final short GT = 36;
		static public final short GEQ = 37;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pLLcTu55KKFREROX8WYwO0aIOf94WQ8OHG4a98WGY88eWe2WH88AY8W0g29JQCelppdzz" +
		"d0KL11Ni7HJI0XMAG8YfsnOeemlNCsxURONPdb$ZX3tU$Sz#zSy#zxywRrm1N8oQW26Cm72" +
		"DGWMgCn0KOXAjHY07eWMkm05sGZCv8mTdeYcxeJdwvZJyBYMtECWeJSJc6eH9Lk0nJu48$T" +
		"3g5B1csMiBnizh8ppc9VvsjIeyyB2rOZ2Mu4Gcu7RtG1xd83#3LO9g5vtRaTL2z#dX377aH" +
		"68oPVbwq8#z2ZCT5VjuAFo$OUr#Ytjl#DOVApvYF6I4YL1yYc2w7SJsc8LAEuHvS72B2zgr" +
		"bZVo4XRWqQ4IQhYhGqzVHK#3eANRqdEVeET$HSqMORFRtF8pRS2$YEJfduYpS433dmzdrOH" +
		"a9I49FsOCwd8DKf2CJlN4kPcCE6Z0NL#8gbDg#hpr3MHZ$wRRR8ni3AQEGXpCG8tzHnY8Ex" +
		"RIyHQs8HZIXFqhyLZrve$MyRfIli0nBjTM4ZhHkrjOTg9D368jnZ9s4oPYAMWoH9t0jvc6H" +
		"V2rVuYRSYZlvBPRZRjo7#m7S1Uzl1SSlW#ENoJsZ3qUnBolDuUh9u$hfnpdMNttZ8bPVp2y" +
		"#cAir6B#gpLaCxdrkhl18ZaaqHwCRHwBjMVvhlhrADzU9#RtQSm#BPyKTrHnF2E2PLYlFSE" +
		"HvU$NnIXrvyPm7O$oyE4TU5xMB#tX9VfxpUmTwp9n3GqHu#m3dcxVtCjPJ7ZB2NcLCs3x#d" +
		"nxxUvfs6MKvtxWGdg3#K7P4M8Ov5moYC#UYcxrqvvxivgdUapjZB#wDQG7LsZE4yvzkkuHL" +
		"9b8EPyKZAECelJkmLtfNXC5xKoptJvyLGPv7psk36IguitgjPDuwMgsk78aOzkXXh8StgnZ" +
		"#ImaFitcKrOdn1lL8FZ4GonCzKTIFgmLOkSoxAwOHwuYDn6x0LS1s6s2aKAzYcsJoVE2pQZ" +
		"vRQyPJ7qjzDR5TvsgYlaFh3rBVPOsrW$u3H8lM3nBhYRqqDh3ThFDiqVv3nCliCuV6FbrBl" +
		"kOKQxlCLcigOpRfU5#UhHJDR7Tg#qYe6bjpOHNpHH7bElTCeWCnIVjF1CQuECwkoLeVJtIp" +
		"#TE9Mbr7BlKP#lai8fiO7RukLvsEZwO#LUi3gK$NElSluw4WSNE8ASG4ee5OgFbhgDThpY9" +
		"YDh60c6U9dQlRnSHyonXLMFJzp7MqrJQE1TQ0vPQS2Pgtn6mvIVVuVDIFXnk7mDn6ikwZ1$" +
		"K7j5vayQVgPsDjSNaXSWxLCOswRM7TxInpgwKDzOsosHDRTLTM81#7RFQ9assZrk9hjleuV" +
		"hymP#wfrXQcxddEFbVAlyZN4EHTLqB$vBXPErjA#LEEoX#m$EI8afye#Rby9WVbKpaW#sMV" +
		"UhBNpzib7rFkzjixYHt4HyI7yhvi5#uuiaqsonQshnFSQUGvULOso7fvHfwMfsITh9MjAle" +
		"zQLRjk$AQl2WloFFoah9NosEKZykZyeYoLodvf9BloAloYhmjRyacsIXloXjyze7oVAlaTs" +
		"Pk#KP#b1$aUyiRVg7axtxxD$cLOt92wNzJJE8jBOedhtdwWgUlc#UCYm3F6iEFQfv78tcoZ" +
		"2AtX7O9$VtO#b1WGN$cyA66TWsvbTGhgLSmzm2sJYWYhv2e8ezd1s#NKJobNGJtQ9v3WwWF" +
		"Ld3pnkdYNS9GoAETmTP4RzPf8f$#qGhWVT08YXp6vR0jrSYcRTxgXbcGpXpfR3D388lzcNS" +
		"ydcUygxa9WtS4D#y8RjuK38Ln$m1YX6vn");

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN7 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 7];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			RETURN6,	// [0] Module = MODULE ID LCURLY Imports Declarations RCURLY; returns 'RCURLY' although none is marked
			RETURN2,	// [1] Imports = Import Imports; returns 'Imports' although none is marked
			Action.NONE,  	// [2] Imports = 
			RETURN3,	// [3] Import = IMPORT ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [4] Declarations = Declaration Declarations; returns 'Declarations' although none is marked
			Action.NONE,  	// [5] Declarations = 
			Action.RETURN,	// [6] Declaration = FunctionDeclaration
			Action.RETURN,	// [7] Declaration = FieldDeclaration
			Action.RETURN,	// [8] Declaration = TypeDeclaration
			RETURN7,	// [9] FunctionDeclaration = Accessibility TypeName ID LPAREN ParameterList RPAREN BlockStatement; returns 'BlockStatement' although none is marked
			RETURN4,	// [10] FieldDeclaration = Accessibility TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN6,	// [11] TypeDeclaration = Accessibility TYPE ID EQL STRING_LITERAL SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [12] Accessibility = PUBLIC
			Action.NONE,  	// [13] Accessibility = 
			Action.RETURN,	// [14] TypeName = PrimitiveType
			Action.RETURN,	// [15] TypeName = ArrayType
			Action.RETURN,	// [16] TypeName = ID
			Action.RETURN,	// [17] PrimitiveType = VOID
			Action.RETURN,	// [18] PrimitiveType = BOOLEAN
			Action.RETURN,	// [19] PrimitiveType = INT
			RETURN3,	// [20] ArrayType = ArrayType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [21] ArrayType = PrimitiveType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [22] ArrayType = ID LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [23] ParameterList = NonEmptyParameterList
			Action.NONE,  	// [24] ParameterList = 
			RETURN3,	// [25] NonEmptyParameterList = Parameter COMMA NonEmptyParameterList; returns 'NonEmptyParameterList' although none is marked
			Action.RETURN,	// [26] NonEmptyParameterList = Parameter
			RETURN2,	// [27] Parameter = TypeName ID; returns 'ID' although none is marked
			Action.RETURN,	// [28] Statement = LocalVariableDeclaration
			Action.RETURN,	// [29] Statement = BlockStatement
			Action.RETURN,	// [30] Statement = IfStatement
			Action.RETURN,	// [31] Statement = WhileStatement
			Action.RETURN,	// [32] Statement = BreakStatement
			Action.RETURN,	// [33] Statement = ReturnStatement
			Action.RETURN,	// [34] Statement = ExpressionStatement
			RETURN3,	// [35] LocalVariableDeclaration = TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [36] BlockStatement = LCURLY StatementList RCURLY; returns 'RCURLY' although none is marked
			RETURN2,	// [37] StatementList = Statement StatementList; returns 'StatementList' although none is marked
			Action.NONE,  	// [38] StatementList = 
			RETURN6,	// [39] IfStatement = IF LPAREN Expression RPAREN Statement ElseClause; returns 'ElseClause' although none is marked
			RETURN2,	// [40] ElseClause = ELSE Statement; returns 'Statement' although none is marked
			Action.NONE,  	// [41] ElseClause = 
			RETURN5,	// [42] WhileStatement = WHILE LPAREN Expression RPAREN Statement; returns 'Statement' although none is marked
			RETURN2,	// [43] BreakStatement = BREAK SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [44] ReturnStatement = RETURN SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [45] ReturnStatement = RETURN Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [46] ExpressionStatement = Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [47] Expression = Assignment
			Action.RETURN,	// [48] Expression = RHSExpression
			RETURN3,	// [49] Assignment = LHSExpression EQL Expression; returns 'Expression' although none is marked
			Action.RETURN,	// [50] LHSExpression = ID
			Action.RETURN,	// [51] LHSExpression = ArrayAccess
			RETURN4,	// [52] ArrayAccess = ID LBRACKET Expression RBRACKET; returns 'RBRACKET' although none is marked
			RETURN4,	// [53] ArrayAccess = ArrayAccess LBRACKET Expression RBRACKET; returns 'RBRACKET' although none is marked
			RETURN2,	// [54] RHSExpression = ArithmeticExpression ComparisonClause; returns 'ComparisonClause' although none is marked
			RETURN2,	// [55] ComparisonClause = ComparisonOperator ArithmeticExpression; returns 'ArithmeticExpression' although none is marked
			Action.NONE,  	// [56] ComparisonClause = 
			Action.RETURN,	// [57] ComparisonOperator = EQEQ
			Action.RETURN,	// [58] ComparisonOperator = NEQ
			Action.RETURN,	// [59] ComparisonOperator = LT
			Action.RETURN,	// [60] ComparisonOperator = LEQ
			Action.RETURN,	// [61] ComparisonOperator = GT
			Action.RETURN,	// [62] ComparisonOperator = GEQ
			new Action() {	// [63] ArithmeticExpression = ArithmeticExpression AdditiveOperator Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [64] ArithmeticExpression = Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [65] AdditiveOperator = PLUS
			Action.RETURN,	// [66] AdditiveOperator = MINUS
			new Action() {	// [67] Term = Term MultiplicativeOperator Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [68] Term = Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [69] MultiplicativeOperator = TIMES
			Action.RETURN,	// [70] MultiplicativeOperator = DIV
			Action.RETURN,	// [71] MultiplicativeOperator = MOD
			RETURN2,	// [72] Factor = MINUS Factor; returns 'Factor' although none is marked
			Action.RETURN,	// [73] Factor = PrimaryExpression
			Action.RETURN,	// [74] PrimaryExpression = LHSExpression
			Action.RETURN,	// [75] PrimaryExpression = FunctionCall
			Action.RETURN,	// [76] PrimaryExpression = ArrayExpression
			Action.RETURN,	// [77] PrimaryExpression = STRING_LITERAL
			Action.RETURN,	// [78] PrimaryExpression = INT_LITERAL
			Action.RETURN,	// [79] PrimaryExpression = Boolean
			Action.RETURN,	// [80] PrimaryExpression = ParenthesizedExpression
			RETURN4,	// [81] FunctionCall = ID LPAREN ExpressionList RPAREN; returns 'RPAREN' although none is marked
			Action.RETURN,	// [82] ExpressionList = NonEmptyExpressionList
			Action.NONE,  	// [83] ExpressionList = 
			RETURN3,	// [84] NonEmptyExpressionList = Expression COMMA NonEmptyExpressionList; returns 'NonEmptyExpressionList' although none is marked
			Action.RETURN,	// [85] NonEmptyExpressionList = Expression
			RETURN3,	// [86] ArrayExpression = LBRACKET NonEmptyExpressionList RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [87] ParenthesizedExpression = LPAREN Expression RPAREN; returns 'RPAREN' although none is marked
			Action.RETURN,	// [88] Boolean = TRUE
			Action.RETURN	// [89] Boolean = FALSE
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
